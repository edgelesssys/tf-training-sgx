################################## GRAMINE ###################################

# Gramine environment, including the path to the library OS and the debug
# the default is "error" for non-debug builds, and "debug" for debug builds.
loader.preload = "file:{{ gramine.libos }}"
loader.log_level = "{{ log_level }}"

# entrypoint is the MarbleRun premain which then calls the executable in argv0
libos.entrypoint = "premain-libos"
# libos.entrypoint = "{{ entrypoint }}"

################################# ARGUMENTS ###################################

# argv0 must be the path to the actual application
loader.argv0_override = "{{ entrypoint }}"

loader.insecure__use_cmdline_argv = true

################################# ENV VARS ####################################

loader.env.LD_LIBRARY_PATH = "{{ python.stdlib }}/lib:/lib:{{ arch_libdir }}:/usr/lib:/usr{{ arch_libdir }}"

# Forward EDG environment variables, used by MarbleRun
#
# Marble type as specified in the MarbleRun manifest
loader.env.EDG_MARBLE_TYPE = { passthrough = true }

# [IP/Domain]:[Port] of the Coordinator's gRPC interface
loader.env.EDG_MARBLE_COORDINATOR_ADDR = { passthrough = true }

# path to the uuid file generated by MarbleRun
loader.env.EDG_MARBLE_UUID_FILE = { passthrough = true }

# valid DNS names of the enclave, used for cert generation
loader.env.EDG_MARBLE_DNS_NAMES = { passthrough = true }

# TensorFlow config
loader.env.TF_CONFIG = { passthrough = true }
loader.env.AZURE_ACCOUNT_NAME = { passthrough = true }
loader.env.AZURE_ACCOUNT_KEY = { passthrough = true }

loader.env.PYTHONDONTWRITEBYTECODE = "1"
loader.env.PYTHONUNBUFFERED = "1"
loader.env.GRPC_FAIL_FAST = "use_caller"

################################## SIGNALS ####################################

# Allow for injecting SIGTERM signal from the host.
sys.enable_sigterm_injection = true

################################# MOUNT FS  ###################################

# Default glibc files, mounted from the Runtime directory in GRAPHENEDIR.
fs.mount.lib.type = "chroot"
fs.mount.lib.path = "/lib"
fs.mount.lib.uri = "file:{{ gramine.runtimedir() }}"

# Host-level libraries (e.g., /lib/x86_64-linux-gnu) required by the Python executable
fs.mount.lib2.type = "chroot"
fs.mount.lib2.path = "{{ arch_libdir }}"
fs.mount.lib2.uri = "file:{{ arch_libdir }}"

# Host-level directory (/usr) required by the Python executable
fs.mount.usr.type = "chroot"
fs.mount.usr.path = "/usr"
fs.mount.usr.uri = "file:/usr"

# Python library mounts
fs.mount.pylib38.type = "chroot"
fs.mount.pylib38.path = "/usr/lib/python3.8"
fs.mount.pylib38.uri = "file:/usr/lib/python3.8"

fs.mount.pylocal38.type = "chroot"
fs.mount.pylocal38.path = "/usr/local/lib/python3.8"
fs.mount.pylocal38.uri = "file:/usr/local/lib/python3.8"

fs.mount.pylib3.type = "chroot"
fs.mount.pylib3.path = "/usr/lib/python3"
fs.mount.pylib3.uri = "file:/usr/lib/python3"

# Mount /tmp
fs.mount.tmp.type = "chroot"
fs.mount.tmp.path = "/tmp"
fs.mount.tmp.uri = "file:tmp"

# Mount /etc
fs.mount.etc.type = "chroot"
fs.mount.etc.path = "/etc"
fs.mount.etc.uri = "file:/etc"

############################### SGX: GENERAL ##################################

# Graphene creates stacks of 256KB by default. It is not enough for SciPy/NumPy
# packages, e.g., libopenblas dependency assumes more than 512KB-sized stacks.
sys.stack.size = "2M"
sgx.enclave_size = "{{ enclave_size }}"
loader.pal_internal_mem_size = "128M"
sgx.thread_num = 512
sgx.nonpie_binary = true

# sgx.rpc_thread_num = 256
libos.check_invalid_pointers = false
sgx.preheat_enclave = true

############################# SGX: TRUSTED FILES ##############################

sgx.trusted_files = [
  "file:{{ gramine.libos }}",
  "file:{{ entrypoint }}",
  "file:{{ gramine.runtimedir() }}/",
  "file:{{ arch_libdir }}/",
  "file:/usr/{{ arch_libdir }}/",
  "file:/usr/lib/python3/",
  "file:/usr/lib/python3.8/",
  "file:/usr/local/lib/python3.8/",
  "file:/usr/bin/uname",
  "file:/usr/lib/ssl/openssl.cnf",
  "file:training.py",
  "file:premain-libos",
  "file:a2d2.py",
  "file:unet.py",
  "file:chief.py",
]

############################# SGX: ALLOWED FILES ##############################

sgx.allowed_files = [
  "file:/etc/localtime",
  "file:/etc/nsswitch.conf",
  "file:/etc/ethers",
  "file:/etc/hosts",
  "file:/etc/group",
  "file:/etc/passwd",
  "file:/etc/gai.conf",
  "file:/etc/host.conf",
  "file:/etc/resolv.conf",
  "file:/etc/ssl/",
  "file:uuid",
  "file:tmp",
  "file:root/.keras/keras.json",
  "file:train",
  "file:/etc/ld.so.cache",
]

# sgx.file_check_policy = "allow_all_but_log"

############################# SGX: Attestation ################################

sgx.remote_attestation = true

# isvprodid should be customized to identify the TensorFlow Model Server enclave
# these values need to be reflected as "ProductID" and "SecurityVersion" in 
# the MarbleRun manifest
sgx.isvprodid = 3
sgx.isvsvn    = 1
